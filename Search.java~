
import java.util.*;
/**
 * This is the brains of the operation. All the real search logic happens here
 * 
 * @author (Jonathan) 
 */
public class Search
{
    // instance variables - replace the example below with your own
    private String strategy;
    private int diagIterations;
    private int currentIterations;
    private Graph graph;
    private LinkedList<Node> open;
    private Set<Node> closed;
    private OutputBlock output;
    private List<DiagBlock> diagQueue;
    private String position; // We keep track of where we are via the coordinates.
    private String oldPosition; // Stores the last place we were at, 
    private String path; // The final path.
    private String goalNode; // Coordinates of the goal node, used to calculate heuristic.

    /**
     * Constructor for objects of class Search
     */
    public Search(String strat, int iterations, Graph newGraph)
    {
        // initialise instance variables
        strategy = strat;
        diagIterations = iterations;
        currentIterations = 0;
        graph = newGraph;
        open = new LinkedList<Node>();
        closed = new LinkedHashSet<Node>();
        output = new OutputBlock(strategy, diagIterations, graph.getGridSize());
        diagQueue = new LinkedList<DiagBlock>();
        position = graph.findStart().getCoords();
        //path = new StringBuilder("S");

        // We can add the starting node to the open set now.
        open.add(graph.findStart());

    }

    /**
     * When this method is called, we start the search for a path. DiagBlocks are generated and kept 
     * in an OutputBlock, which is returned by the method at the end.
     *
     */
    public OutputBlock run()
    {
        long startTime = System.currentTimeMillis();
        switch (strategy)
        {
            case "D": System.out.println("Initiating Depth-First search..."); break;
            case "B": System.out.println("Initiating Breadth-First search..."); break;
            case "U": System.out.println("Initiating Uniform Cost search..."); break;
            case "A": System.out.println("Initiating A/A* search..."); break;
            default: System.out.println("Search strategy not available, something broke."); break;
        }
        boolean finished = false;
        // We want to run until we're done
        while (!finished)
        {
            // Time to expand the node we've chosen (or started at)
            currentIterations++; // Increment iterations
            Node n = graph.getNode(position);

            if (Driver.verbose()) 
            {
                System.out.println("# Looking at node (" + n.getCoords() + ") #");
                System.out.println("Type: " + n.getNodeType() + " | g: " + n.getCost() + " | h: " 
                    + n.getHeuristic() + " | f: " + n.getFn() + " | Parent: (" + n.getCameFrom() + ")\n"
                    + "Path: " + n.getPath());
            }

            // If we need diagnostics prepare a block
            if (currentIterations <= diagIterations) 
            {
                DiagBlock thisDiag = new DiagBlock();
                thisDiag.addLine(n.getPath() + " " + n.getCost() + " " + n.getHeuristic() + " " + n.getFn());
                StringBuilder sb1 = new StringBuilder();
                sb1.append("OPEN");
                for (Node diagOpenNode: open)
                {
                    sb1.append(" " + diagOpenNode.getPath());
                }
                thisDiag.addLine(sb1.toString());
                StringBuilder sb2 = new StringBuilder();
                sb2.append("CLOSED");
                for (Node diagClosedNode: closed)
                {
                    sb2.append(" " + diagClosedNode.getPath());
                    if (Driver.verbose()){System.out.println("Added a diag line.");}
                }
                thisDiag.addLine(sb2.toString());
                diagQueue.add(thisDiag);
                if (Driver.verbose()){System.out.println("Added a diag block to queue");}
            }

            // Grabbing neighbours
            LinkedHashMap<String,Edge> neighbours = n.getEdges();

            if (n.getNodeType() == 'G')
            {
                // If we're on the goal node, we finish and start packing up our output
                // If we were using BFS or DFS we won't get here, because those strategies finish when they 
                // see the goal, not when they select it for expansion.
                System.out.println("Found the goal node at position (" + n.getCoords() + ")");

                finished = true;
                closed.add(n);
                path = n.getPath() + "-G " + n.getRealCost();
                if (Driver.verbose()){System.out.println("Final path: " + path);}
                output.setPath(path);
                //PUT THE PATH INTO THE OUTPUT BLOCK
                continue;
            }
            else 
            {
                // Adding this node to the closed set
                closed.add(n);
                // Removing it from the open set.
                open.remove(n);

                // Now adding children of this node to the open set
                for (Edge neighbour: neighbours.values())
                {
                    // Checking if this neighbour is already in the closed set.
                    if (!(closed.contains(neighbour.getDest()) || open.contains(neighbour.getDest()))) 
                    {
                        // It's not in the closed set.

                        if (Driver.verbose()) {
                            System.out.println("--> Looking at neighbour (" + neighbour.getDest().getCoords() + ")");}
                        neighbour.getDest().cameFrom(position);
                        neighbour.getDest().setPath(n.getPath() + "-" + neighbour.getDirection());
                        neighbour.getDest().setRealCost(n.getRealCost() + neighbour.getEdgeCost());

                        switch (strategy)
                        {
                            case "B":
                            case "D":
                            neighbour.getDest().setCost(n.getCost() + 1);
                            case "U":
                            case "A":
                            neighbour.getDest().setCost(n.getCost() + neighbour.getEdgeCost()); 
                            default:
                            System.err.println("Something has gone terribly wrong with the strategy again."); break;
                        }
                        // We've given it a cost based on the strategy we're using, now we add it to the open set.
                        open.add(neighbour.getDest()); // changed from addLast
                        //Maybe we found the goal, we can do this in BFS and DFS
                        if (((strategy == "B") || (strategy == "D")) && (neighbour.getDest().getNodeType() == 'G'))
                        {
                            // If we see the goal while doing BFS or DFS, we end here
                            System.out.println("Found the goal node while looking at neighbour (" + n.getCoords() + ")");

                            finished = true;
                            path = neighbour.getDest().getPath() + "-G " + n.getRealCost();
                            if (Driver.verbose()){System.out.println("Final path: " + path);}
                            output.setPath(path);
                            //PUT THE PATH INTO THE OUTPUT BLOCK
                            continue;

                        }
                    }

                    // Done adding neighbours to the open set
                }

                // Done with this node
                selectNextNode();

            }
            // And we're done, returning the output block now.
            long endTime = System.currentTimeMillis();
            long processTime = (endTime - startTime);
            System.out.println("Took " + processTime + "ms");
            for (DiagBlock db: diagQueue)
            {
                output.addDiagBlock(db);
            }

        }
        return output;
    }
    


/**
 * Selects the appropriate next node to expand from the open set
 *
 * @param  y   a sample parameter for a method
 * @return     the sum of x and y
 */

public void selectNextNode()
{
//Which node we pick from the queue depends on the strategy we're using
Node nextNode;
switch (strategy)
{
case "B": 
nextNode = open.getFirst(); break;
case "D": 
nextNode = open.getLast(); break;
case "U": 
sortUCS(); 
nextNode = open.getFirst();
break;
case "A": 
sortA();
nextNode = open.getFirst();
break;
default: System.out.println("Search strategy not available, something broke."); nextNode = null; break;
}
oldPosition = position;
position = nextNode.getCoords();
// When this is called, the pathfinding loop will repeat with a new position.
}

/**
 * Sorts the open set by g(n) - for a Uniform Cost Search
 *
 */
public void sortUCS()
{
// put your code here
Collections.sort(open, Node.GComparator);
}

/**
 * Sorts the open set by f(n), used for A/A*
 *
 */
public void sortA()
{
// put your code here
Collections.sort(open, Node.FComparator);
}

}
